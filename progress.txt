Step 0: Introduce SoR, explain goal

Step 1: Research Mac 68k binary format: 
CODE resource forks: https://support.apple.com/kb/TA21606?locale=en_US
SegmentManager: http://mirror.informatimago.com/next/developer.apple.com/documentation/mac/Processes/Processes-135.html

Step 2: Setup vMac, MPW, use DumpCode to generate disassembly

Step 3: Split into files per CODE segment, beginning splitting at Jump Table offsets

Step 4: Notice that disassembled instructions span Jump Table offsets: constant pools?  Annotate to revisit later

Step 5: Use RTS instructions to further split up segments

Step 6: Notice that "constant pools" come after functions, contain strings that appear to be symbol names.  Start using those in annotations
MacsBug symbols:  http://www.toddp.com/classic/Software%20Install/Development%20Tools/001%20-%20Application%20Suites/001%20-%20CodeWarrior/CodeWarrior%202000%20(Full)/Metrowerks%20CodeWarrior/MacOS%20Support/Headers/Universal%20Headers/DisAsmLookup.h

Step 7: Run across lots of familiar-looking libc functions!

Step 8: Try to work out execution flow starting in CODE 0.  Identify that it's basically crt1.o, figure out how it finds and calls main in CODE 1.  Remark on constant pool used for main() offset - cheap linker hack?

Step 9: Re-run disassembly to fix up broken functions

Step 10: Label all (static) callsites

Step 11: Build (static) call graph.  Start to build some intuition of what things do what.  Notice that large swaths of the binary are not touched.

Step 12: Start looking into indirect jumps.  Identify and label switch jumps.

Step 13: Figure out the meaning of PEA instruction, and its use for callbacks.  Label PEAs, add to callgraph.

Step 14: Notice that some nodes found in PEA search still have no incoming edges.  Start looking for ways they could be accessed through globals.

Step 15: Figure out that DATA resource is probably data section.  Poke through CODE 1 (crt1.o) and figure out that code1-anon25() is likely setting it up.  Convert function pseudo code to figure it out.  Determine that it's using RLE of nulls, as well as applying some kind of A5-relative relocations.

Step 16: Extract DATA, ZERO, and DREL resources using DeRez.  Cleanup a bit in vim, then convert to binary blobs with xxd.

Step 17: Write a utility to decompress the DATA section.  Squash some bugs (bytes vs words, big vs little endian).  Verify that the result matches the global size listed in the jump table.

